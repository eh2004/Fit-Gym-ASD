trigger:
  - "*"

pool:
  vmImage: ubuntu-latest

variables:
  WEB_APP_DOMAIN: 'gym-hkdtbzfbg4fjeyad.scm.canadacentral-01.azurewebsites.net'

stages:
- stage: BuildAndDeploy
  jobs:
  - job: BuildDeploy
    pool:
      vmImage: ubuntu-latest
    steps:
      # Install Node.js 18
      - task: NodeTool@0
        inputs:
          versionSpec: '18.x'
        displayName: 'Install Node.js 18.x'

      # Install backend dependencies
      - script: |
          cd BackEnd
          npm install
        displayName: 'Install Backend Dependencies'

      # Install frontend dependencies and run unit tests
      - script: |
          cd FrontEnd
          npm install
          npm test --watchAll=false
        displayName: 'Run Frontend Unit Tests'

      # Publish the merged JUnit test results
      - task: PublishTestResults@2
        inputs:
          testResultsFiles: './FrontEnd/junit.xml'  # Adjust if necessary
          testRunTitle: 'Frontend Unit Test Results'
          mergeTestResults: true
        displayName: 'Publish Unit Test Results'

      # Build the frontend after tests pass
      - script: |
          cd FrontEnd
          npm run build
        displayName: 'Build Frontend'

      # Copy frontend build output directly to a staging folder for deployment
      - script: |
          mkdir -p deploy_staging
          cp -r FrontEnd/dist/* deploy_staging/  # Copy dist contents directly into deploy_staging
        displayName: 'Prepare Deployment Package'

      # Archive only the contents of deploy_staging for deployment
      - task: ArchiveFiles@2
        inputs:
          rootFolderOrFile: '$(System.DefaultWorkingDirectory)/deploy_staging'
          includeRootFolder: false
          archiveType: 'zip'
          archiveFile: '$(Build.ArtifactStagingDirectory)/app.zip'
        displayName: 'Archive Frontend Build Files for Deployment'

      # Download the Publish Profile Secure File
      - task: DownloadSecureFile@1
        inputs:
          secureFile: 'gym.PublishSettingsAS.PublishSettings'  # Use the exact name as shown in your library
        displayName: 'Download Azure Publish Profile'

      # Deploy to Azure App Service using Publish Profile via Curl and Kudu API
      - task: Bash@3
        inputs:
          targetType: 'inline'
          script: |
            echo "Starting deployment using Publish Profile..."
            
            # Extract username and password from the publish profile
            PUBLISH_USERNAME=$(grep -oP '(?<=userName=")[^"]+' $(Agent.TempDirectory)/gym.PublishSettingsAS.PublishSettings)
            PUBLISH_PASSWORD=$(grep -oP '(?<=userPWD=")[^"]+' $(Agent.TempDirectory)/gym.PublishSettingsAS.PublishSettings)
            
            # Use the exact Kudu domain for deployment
            curl -X POST -u "$PUBLISH_USERNAME:$PUBLISH_PASSWORD" \
                 -F "package=@$(Build.ArtifactStagingDirectory)/app.zip" \
                 https://${WEB_APP_DOMAIN}/api/zipdeploy
            
            echo "Deployment to Azure App Service complete!"
        displayName: 'Deploy to Azure App Service using Publish Profile and Curl'
